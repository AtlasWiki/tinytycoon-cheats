

 // <================== UI Designs ==================>

    // Create the popup element
    const popup = document.createElement('div');
    popup.style.position = 'fixed';
    popup.style.top = '50%';
    popup.style.left = '50%';
    popup.style.transform = 'translate(-50%, -50%)';
    popup.style.width = '500px';
    popup.style.height = '700px';
    popup.style.backgroundColor = 'white';
    popup.style.border = '1px solid #ccc';
    popup.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
    popup.style.zIndex = '50';
    popup.style.display = 'block'; // Show the popup immediately
  
    // Create the popup header
    const popupHeader = document.createElement('div');
    popupHeader.style.backgroundColor = '#38a169'; 
    popupHeader.style.color = 'white';
    popupHeader.style.padding = '8px';
    popupHeader.style.cursor = 'move';
    popupHeader.style.display = 'flex';
    popupHeader.style.justifyContent = 'space-between';
    popupHeader.style.alignItems = 'center';
    popupHeader.textContent = 'Tiny Tycoon Cheat Engine';
  
    // Create close button
    const closeBtn = document.createElement('button');
    closeBtn.textContent = 'X';
    closeBtn.style.backgroundColor = '#f56565';
    closeBtn.style.color = 'white';
    closeBtn.style.padding = '4px';
    closeBtn.style.borderRadius = '4px';
    closeBtn.style.marginLeft = '8px';
    closeBtn.style.cursor = 'pointer';
    closeBtn.addEventListener('mouseover', () => closeBtn.style.backgroundColor = '#e53e3e');
    closeBtn.addEventListener('mouseout', () => closeBtn.style.backgroundColor = '#f56565');
    popupHeader.appendChild(closeBtn);
  
    // Create the body of the popup
    const popupBody = document.createElement('div');
    popupBody.style.padding = '16px';
  
    // Create buttons inside the popup
    const createButton = (name, id, size, margin) => {
      const button = document.createElement('button');
      button.textContent = name;
      button.id = id;
      button.style.width = size;
      button.style.padding = '8px';
      button.style.marginBottom = margin;
      button.style.backgroundColor = '#f7fafc'; // Tailwind's bg-gray-100
      button.style.border = '1px solid #e2e8f0';
      button.style.borderRadius = '4px';
      button.style.cursor = 'pointer';
      button.addEventListener('mouseover', () => button.style.backgroundColor = '#edf2f7');
      button.addEventListener('mouseout', () => button.style.backgroundColor = '#f7fafc');
      return button;
    };
  

    // Heading for Resource Selecting Section
    const rh3 = document.createElement('h3');
    rh3.textContent = "Resource Amount"

    // Create select menu for resources inside the popup
    const resourcesSelect = document.createElement('select');
    resourcesSelect.id = "resources-select";
    resourcesSelect.style.marginBottom = '10px';
    resourcesSelect.style.marginRight = '5px';
    const options = ['seed', 'wood', 'stone', 'iron', 'oil'];
    for (option of options){
      let currOption = document.createElement('option');
      currOption.id = option;
      currOption.textContent = option;
      resourcesSelect.appendChild(currOption);
    }

    // Create set number amount for each resource
    const resourceAmt = document.createElement('input');
    resourceAmt.type = 'number'
    resourceAmt.placeholder = 'Enter Number'

    // Heading for Analytics Selecting Section
    const ah3 = document.createElement('h3');
    ah3.textContent = "Analytics"

    const mouseClickInput = document.createElement('input');
    mouseClickInput.id = 'mouseClickInput';
    mouseClickInput.placeholder = "Mouse Click";
    mouseClickInput.style.marginBottom = "5px";
  

    const timeTakenInput = document.createElement('input');
    timeTakenInput.id = 'timeTakenInput';
    timeTakenInput.placeholder = "Time Taken";

    const wh3 = document.createElement('h3');
    wh3.textContent = "Current World"

    popupBody.appendChild(rh3);
    popupBody.appendChild(resourcesSelect);
    popupBody.appendChild(resourceAmt);
    popupBody.appendChild(createButton('ADD', 'addResources', "50%", "8px"));
    popupBody.appendChild(createButton('ADD TO ALL', 'addToAllResources', "50%", "8px"));
    popupBody.appendChild(ah3);
    // popupBody.appendChild(mouseClickLbl);
    popupBody.appendChild(mouseClickInput);
    popupBody.appendChild(timeTakenInput);
    popupBody.appendChild(createButton('SET & WIN', 'setAnalyticsBtn', "100%", "8px"));

    popupBody.appendChild(wh3);
    popupBody.appendChild(createButton('WIN', 'setWin', "50%", "0px"));
    popupBody.appendChild(createButton('RESET ITEMS', 'setRESETItems', "50%", "0px"));
    popupBody.appendChild(createButton('NEW WORLD', 'setRESETWorld', "100%", "8px"));

    popup.appendChild(popupHeader);
    popup.appendChild(popupBody);
    document.body.appendChild(popup);

    // Create a resize handle
    const resizeHandle = document.createElement('div');
    resizeHandle.style.position = 'absolute';
    resizeHandle.style.bottom = '8px';
    resizeHandle.style.right = '8px';
    resizeHandle.style.width = '16px';
    resizeHandle.style.height = '16px';
    resizeHandle.style.backgroundColor = '#38a169';
    resizeHandle.style.cursor = 'se-resize';
    popup.appendChild(resizeHandle);
  
    // Function to close the popup
    closeBtn.addEventListener('click', () => {
      popup.style.display = 'none';
    });
  
    document.addEventListener('keydown', (event) => {
      switch(event.key){
        case "b":
          if (popup.style.display === 'block'){
            popup.style.display = 'none';
          } else{
            popup.style.display = 'block';
          }
          break;
      }
    })
  
    // Make the popup draggable
    let isDragging = false;
    let offsetX, offsetY;
  
    popupHeader.addEventListener('mousedown', (e) => {
      isDragging = true;
      offsetX = e.clientX - popup.offsetLeft;
      offsetY = e.clientY - popup.offsetTop;
    });
  
    document.addEventListener('mousemove', (e) => {
      if (isDragging) {
        popup.style.left = `${e.clientX - offsetX}px`;
        popup.style.top = `${e.clientY - offsetY}px`;
      }
    });
  
    document.addEventListener('mouseup', () => {
      isDragging = false;
    });
  
    // Make the popup resizable
    let isResizing = false;
    let initialWidth, initialHeight, initialX, initialY;
  
    resizeHandle.addEventListener('mousedown', (e) => {
      isResizing = true;
      initialWidth = popup.offsetWidth;
      initialHeight = popup.offsetHeight;
      initialX = e.clientX;
      initialY = e.clientY;
      e.preventDefault();
    });
  
    document.addEventListener('mousemove', (e) => {
      if (isResizing) {
        const newWidth = initialWidth + (e.clientX - initialX);
        const newHeight = initialHeight + (e.clientY - initialY);
        popup.style.width = `${newWidth}px`;
        popup.style.height = `${newHeight}px`;
      }
    });
  
    document.addEventListener('mouseup', () => {
      isResizing = false;
    });
  

// <================== Logic ==================>

// Initalize Resources Cache Key
addResource(null, null);
setTimeout(() => {
  const nullClass = document.getElementsByClassName('null');
  for (i of nullClass){
    i.style.display="none";
  }
}, 1000)


// Initialize all local storage values
let resourcesKey = Object.keys(localStorage).find((key) => {
  return key === `resources-${JSON.parse(localStorage["settings"]).recordId}`;
});

let seed = JSON.parse(localStorage[resourcesKey]).seed || 0;
let wood = JSON.parse(localStorage[resourcesKey]).wood || 0;
let stone = JSON.parse(localStorage[resourcesKey]).stone || 0;
let oil = JSON.parse(localStorage[resourcesKey]).oil || 0;
let iron = JSON.parse(localStorage[resourcesKey]).iron || 0;

// buttons
const addBtn = document.getElementById("addResources");
const addAllBtn = document.getElementById("addToAllResources");
const setAnalyticsBtn = document.getElementById("setAnalyticsBtn");
const setWin = document.getElementById("setWin");
const resetItems = document.getElementById('setRESETItems');
const resetWorld = document.getElementById('setRESETWorld')

// button logic and listeners
addAllBtn.addEventListener("click", () => {
  seed = seed + Number(resourceAmt.value)
  wood = wood + Number(resourceAmt.value);
  stone = stone + Number(resourceAmt.value);
  oil = oil + Number(resourceAmt.value);
  iron = iron + Number(resourceAmt.value);
  setResources(seed, wood, stone, iron, oil);
})

addBtn.addEventListener("click", () => {
  switch(resourcesSelect.value) {
    case "seed":
      seed = seed + Number(resourceAmt.value);
      setResources(seed, wood, stone, iron, oil);
      break;
    case "wood":
      wood = wood + Number(resourceAmt.value);
      setResources(seed, wood, stone, iron, oil);
      break;
    case "stone":
      stone = stone + Number(resourceAmt.value);
      setResources(seed, wood, stone, iron, oil);
      break;
    case "oil":
      oil = oil + Number(resourceAmt.value);
      setResources(seed, wood, stone, iron, oil);
      break;
    case "iron":
      iron = iron + Number(resourceAmt.value);
      setResources(seed, wood, stone, iron, oil);
      break;
  }
})

setAnalyticsBtn.addEventListener("click", () => {
  const analyticsData = setAnalytics(mouseClickInput.value, timeTakenInput.value);
  window.dispatchEvent(new CustomEvent("launchRocket", {
    detail: JSON.parse(analyticsData)
  }));
})

setWin.addEventListener("click", () => {
  const analyticsKey = Object.keys(localStorage).find((key) => {
    return key === `analytics-${JSON.parse(localStorage["settings"]).recordId}`;
  });
  window.dispatchEvent(new CustomEvent("launchRocket", {
    detail: localStorage[analyticsKey]
  }));
})

resetItems.addEventListener("click", () => {
  resetWorldCache()
})

resetWorld.addEventListener("click", () => {
  window.dispatchEvent(new CustomEvent("newMission",{
      detail: {
          complete: !1
      }
    }))
  resetWorldCache()
})

// attach listener to reset all other cache keys upon new mission/game
window.addEventListener("newMission", function() {
  resetWorldCache()
})


// Exploit functions
function setAnalytics(clickAmt, time) {
  const analyticsSettings = `{"click":${clickAmt},"tree":0,"sawmill":0,"mineshaft":0,"worker":0,"oil-drill":0,"rocket-ship":0,"time":${time}}`;
  const analyticsKey = Object.keys(localStorage).find((key) => {
      return key === `analytics-${JSON.parse(localStorage["settings"]).recordId}`;
  });
  localStorage.setItem(analyticsKey, analyticsSettings);
  return analyticsSettings;
};

function setResources(seedAmt, woodAmt, stoneAmt, ironAmt, oilAmt) {
  addResource('Press "b" for cheats', 'mrunoriginal')
  const resourceSettings = `{"seed":${seedAmt},"wood":${woodAmt},"stone":${stoneAmt},"iron":${ironAmt},"oil":${oilAmt}}`
  localStorage.setItem(resourcesKey, resourceSettings);
  window.dispatchEvent(new CustomEvent("updateResourceList",{
      detail: {
          resources: JSON.parse(resourceSettings),
          override: null
      }
  }))
  addResource('Press "b" for cheats', 'mrunoriginal')
}

// utils
function addResource(resource, amt){
  window.dispatchEvent(new CustomEvent("addResource",{
      detail: {
          name: resource,
          amount: amt
      }
  }))
}

function resetWorldCache(){
  const cacheKeys = Object.keys(localStorage);
  const missionKeys = cacheKeys.filter( key =>  key != "settings")
  missionKeys.forEach( key => {
      localStorage.removeItem(key)
  })
  addResource('Press "b" for cheats', 'mrunoriginal')
  resourcesKey = Object.keys(localStorage).find((key) => {
    return key === `resources-${JSON.parse(localStorage["settings"]).recordId}`;
  });
  seed = JSON.parse(localStorage[resourcesKey]).seed || 0;
  wood = JSON.parse(localStorage[resourcesKey]).wood || 0;
  stone = JSON.parse(localStorage[resourcesKey]).stone || 0;
  oil = JSON.parse(localStorage[resourcesKey]).oil || 0;
  iron = JSON.parse(localStorage[resourcesKey]).iron || 0;
}

